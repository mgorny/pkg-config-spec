========================
pkg-config specification
========================
:Author: Michał Górny <mgorny@gentoo.org>
:Copyright: http://creativecommons.org/licenses/by/3.0/


Introduction
============

pkg-config is a helper tool for obtaining correct compiler & linker
flags suitable to satisfying application dependencies. It was designed
to be platform- and language-agnostic, and to support installing
dependencies in any locations without the need for explicitly specifying
those locations every time an application is built.

Sadly, the official pkg-config_ implementation had a few deficiencies.
Most importantly, the upstream decided to use the glib_ and popt_
libraries. The latter being redundant and having portability problems,
the former being quite large and causing circular dependencies (since
glib's build required pkg-config itself), they limited the popularity
and usefulness of pkg-config [1]_.

The fore-mentioned deficiencies of the official implementation has
caused a number of alternative implementations to arose. Amongst them
there were the `OpenBSD implementation`_ in Perl, and pkgconf_
in ANSI C. The work on those implementations and the experience in using
them has shown that pkg-config lacks proper documentation. The only
official documentation on it are the `man page`_ and a short tutorial-\
style Guide_.

Thus, I have decided to write a complete and detailed specification of
how pkg-config works based on the experiences with implementing
pkgconf [2]_. The goal is to provide a complete, well-organized guide
which would prove useful both to end-users, and to people trying to
create or improve their own pkg-config implementation.

.. [1] The redundant popt dependency has been finally removed lately,
       and the necessary glib parts started to be bundled along with
       pkg-config in order to simplify bootstrap.
.. [2] Please note that I am *not* the author of pkgconf. William
       Pitcock is.

.. _pkg-config: http://www.freedesktop.org/wiki/Software/pkg-config
.. _glib: http://developer.gnome.org/glib/
.. _popt: http://rpm5.org/files/popt/
.. _`OpenBSD implementation`:
	http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/pkg-config/
.. _pkgconf: https://github.com/pkgconf/pkgconf
.. _`man page`: http://linux.die.net/man/1/pkg-config
.. _Guide: http://people.freedesktop.org/~dbn/pkg-config-guide.html


The package file format
=======================

The packages in pkg-config are specified inside files called `package
files`. These files have an obligatory ``.pc`` suffix, and are line-\
oriented text files.


Data encoding
-------------

The consecutive lines are delimited using any of the following
characters::

	line-delim = LF / CR / CR LF / LF CR

Each line has the following form::

	line = line-data *( escaped-delim line-data ) [ "#" comment ]
	escaped-delim = "\" ( line-delim / "#" )

The following should be noted:

1. The ``#`` character indicates start of a comment, except when
   preceded by a backslash (``\``). When preceded by a backslash,
   it is interpreted as a literal ``#``.
2. When not in a comment, the line delimiter can be escaped through
   preceding with a backslash (``\``). In that case, the consecutive
   lines are concatenated.
3. The comments always end at the end-of-a-line.
4. Any other occurrence of a backslash (``\``) is interpreted
   as a literal backslash.

The interpreted line data is created through concatenating
the consecutive line data and escaped delimiters up to the first
non-escaped ``#``, line delimiter or end-of-file. Comments
are discarded.


Data format
-----------

Each interpreted data line follows the following format::

	data-line  = empty-line / keyword / variable

	empty-line = *WSP
	keyword    = *WSP tag *WSP ":" *WSP value *WSP
	variable   = *WSP tag *WSP "=" *WSP value *WSP

	tag        = 1*( ALPHA / DIGIT / "_" / "." )
	value      = *( value-data / esc-var / var-ref )
	esc-var    = "$$"
	var-ref    = "${" tag "}"

The `variable` syntax defines a variable with a name defined by `tag`.
The variable definition becomes effective (i.e. can be referenced)
starting with the following line. If a variable is declared multiple
times, the next declaration replaces the previous value [3]_
and a warning is printed.

The `keyword` syntax defines a keyword with a name defined by `tag`.
The list of allowed names and their meaning is described in Keywords_.
If a keyword uses a name unknown to the particular pkg-config version,
it is silently ignored. If a keyword is declared multiple times,
the next declaration replaces the previous value and a warning
is printed.

For both variable and keyword definition values, variable substitution
is performed. All occurrences of `var-ref` are substituted with
the current, effective value of a variable named by `tag`. In order to
prevent the variable substitution, the ``$`` character can be escaped by
repeating it twice; all occurrences of ``$$`` (`esc-var`) will be
substituted with a single ``$``.

.. [3] Note that the new value is effective starting with the next line,
       thus the old value will still be used for previous lines
       and the variable declaration itself.


Keywords
--------

The following list describes all the keywords interpreted by pkg-config
as of version 0.27:

``Name``
	Free-form package name. Please note that the name specified here is
	intended for display only; the package is always identified
	in pkg-config by the `package key`_. *Obligatory*.

``Description``
	Free-form package description. *Obligatory*.

``Version``
	Package version. *Obligatory*.

	There are no direct requirements on version string format; however,
	their use in a `package list`_ disallow use of whitespace, ``<``,
	``>``, ``=`` and ``!`` characters. Additionally, it is important
	to consider `version comparison`_ rules.

``URL``
	Package homepage URL.

	The URL listed here is used to recommend a download location for new
	versions of package whenever a newer version than installed is
	requested.

``Cflags`` or ``CFlags``
	Required compiler flags. These flags are always used.

	The syntax for `Cflags` value is detailed in Cflags_.

``Libs``
	Dependant libraries, and required compiler linking flags. These
	flags are always used when a package is requested directly; they
	are also used when the package is a requisite for another package
	and the library format does not express inter-library dependencies.

	The syntax for `Libs` value is detailed in Libs_.

``Libs.private``
	Private dependant libraries. The flags listed there will be appended
	to the value of `Libs` if the library format does not express
	inter-library dependencies.

``Requires``
	Public package dependencies. All packages mentioned there will be
	required for the package check to succeed, and the effective
	`Cflags` for each of them will be appended to the effective `Cflags`
	of the current package. Additionally, if the library format does not
	express inter-library dependencies, the same applies to `Libs`.

	The syntax for `Requires` value is detailed in the `package list`_
	description.

``Requires.private``
	Private package dependencies. The packages mentioned there will be
	appended to the effective `Requires` list if the library format
	does not support inter-library dependencies.

``Conflicts``
	The list of conflicting packages. If any of the packages mentioned
	there is used by the application, the current package can not be
	used.

	The syntax for `Conflicts` value is detailed in the `package list`_
	description.

If any of the keywords marked as *obligatory* is not specified
by the particular package, it is considered ill-formed and pkg-config
exits with an error if it is requested (either directly or indirectly).


Keyword value interpretation
============================

Package key
-----------

Every package is identified in pkg-config by a unique package key.
The key is created from the package filename, after stripping
the ``.pc`` suffix, and then an optional ``-uninstalled`` suffix.


Cflags
------

The `Cflags` keyword contains compiler flags, in a form suitable
for passing to a POSIX shell (excluding the shell expansions). When
parsing the variable, pkg-config uses shell quoting rules to split it
into consecutive command-line arguments.

The flags encountered in `Cflags` are grouped into the two following
groups:

1. the ``-I`` (include path) flags,
2. other flags [4]_.

.. [4] pkg-config additionally concatenates the ``-idirafter``
       option with its argument to ensure that multiple occurences
       of it aren't collapsed.


Libs
----

The `Libs` keyword contains compiler linking flags, in a form suitable
for passing to a POSIX shell (excluding the shell expansions). When
parsing the variable, pkg-config uses shell quoting rules to split it
into consecutive command-line arguments.

The flags encountered in `Libs` are grouped into the three following
groups:

1. the ``-l`` (library name) flags [5]_,
2. the ``-L`` (library path) flags,
3. other flags [6]_.

.. [5] pkg-config additionally ensures not to put C# ``-lib:`` to that
       group.
.. [6] pkg-config additionally concatenates the MacOS X ``-framework``
       option with its argument to ensure that multiple occurences
       of ``-framework`` aren't collapsed.


Package list
------------

The `Requires` and `Conflicts` keywords, and also command-line arguments
to pkg-config form package lists. A package list is formed using
the following syntax::

	package-list = *WSP *( package-spec *( package-sep ) )
	package-sep  = WSP / ","

	package-spec = package-key [ ver-op package-version ]
	ver-op       = "<" / "<=" / "=" / "!=" / ">=" / ">"

If `ver-op` and `package-version` are specified, only packages
satisfying the specified version requirement will match. Otherwise,
any package with matching `package-key` will match.

The rules for version matching are detailed in `Version comparison`_.


Version comparison
------------------

pkg-config version comparison rules follow those established
for the RPM_ package manager.

As seen by the comparison algorithm, the versions could be described
using the following syntax::

	version-string = 1*( alpha-seg / numeric-seg / version-sep )
	alpha-seg      = 1*( ALPHA )
	numeric-seg    = 1*( DIGIT )

For the comparison, the version number is split into alphabetic
(`alpha-seg`) and/or numeric segments (`numeric-seg`), either
alternating or separated by non-alphanumeric characters.

Afterwards, for each corresponding segment of the two version numbers,
the following algorithm is repeated until either one of the segments is
indicated newer or the end of either version string is reached:

1. If both compared segments are numeric, the segment with larger
   integer value is considered newer [7]_.
2. If both compared segments are alphabetic, a semi-lexical (ASCII
   code) comparison is applied (using ``strcmp()``).
3. If the compared segments are of different type (one numeric
   and the other alphabetic), the version with numeric segment
   is considered newer.

If all version components from both strings are used without finding
a segment indicating that one of the versions is newer, the versions
are considered equal. If all version components from one of the strings
are used while the other has more components, the latter is considered
newer.

.. [7] Note that the version numbers can be arbitrarily long. For that
       reason, the comparison used in pkg-config uses semi-lexical
       comparison of normalized numeric strings.

.. _RPM: http://www.rpm.org/


Package file lookup
===================

Whenever a package is requested by a `package list`_, the following
algorithm is used to find the requested package:

1. If the `package-key` ends with a ``.pc`` suffix, it is interpreted
   as an absolute path to the package file and that file is used.
   If the file is not readable or does not exist, the package is
   considered not found.
2. If the `package-key` does not end with an ``-uninstalled`` suffix
   and uninstalled package versions are preferred (the default),
   the mentioned suffix is temporarily appended to the package key
   and a `package search`_ is performed with that name. If it succeeds,
   the package found is returned.
3. A `package search`_ is performed using the given package key. If it
   succeeds, the package found is returned.
4. If the `package-key` is ``pkg-config``, a virtual package
   for pkg-config is returned. The package specifies at least
   a `Version` keyword matching a pkg-config version [8]_,
   and a `pc_path` variable expressing the default package search paths.

.. [8] Please note that a particular consumer may require a specific
       pkg-config version. For that reason, it is recommended to use
       version numbers matching upstream versions; an implementation
       following this specification should use the version ``0.27``.

       If the implementor wishes to append a program-specific version,
       it is recommended to use an alphabetic version separator,
       e.g. ``0.27/pkgconf-0.8.7``. This ensures that the particular
       version is always considered older than the next upstream
       version (see: `Version comparison`_).


Package search
--------------

Whenever a package search is performed for a package, the ``.pc`` suffix
is appended to the `package-key` and a search for a regular file
(or a symbolic link to a regular file) with a matching name is performed
in package search paths. If a particular package is found in multiple
directories, the one found in earlier directory is used (even if it has
an older version than the other).


Command-line interface
======================

pkg-config provides a public command line interface through
the ``pkg-config`` executable. The executable accepts GNU-style long
options and an arbitrary number of positional parameters. Those
parameters are concatenated, forming a requested `package list`_.


The exclusive commands
----------------------

The options listed in this section fully influence the operation mode
of pkg-config. If any of them is specified, pkg-config performs
the appropriate operation and exits. If more than one is specified,
the one coming earlier in this list is respected and the other options
are ignored.

``--version``
	Outputs the pkg-config version and exits with `0` status.

``--atleast-pkgconfig-version=VERSION``
	Checks whether pkg-config version is at least `VERSION`. Exits with
	`0` status if it is, or `1` if it is older.

	The version is compared using package `version comparison`_ rules.

``--list-all``
	Prints a list containing all packages found in `package search`_
	paths.

	For each found package (with an unique `package key`_),
	the following is printed::

		output = package-key *WSP name SP "-" SP description

	The `name` and `description` fields correspond to the appropriate
	package keywords. No line wrapping is performed. If multiple
	packages with the same key are found, the one occurring
	in the earlier `package search`_ directory is used.

	Afterwards, pkg-config exits with `0` status.

``--print-variables``
	Prints a list of all variables declared in the specified package.
	The list contains variable names, one per line. If more than one
	package is specified, the package list is iterated in the reverse
	order (i.e. variables for the last package come first) and an empty
	line is used to separate output for the consecutive packages.

	After using this option, pkg-config continues execution. However, if
	the ``--exists`` option is specified as well, it exits after
	performing the check appropriate for that option.

``--exists``
	Checks silently whether all specified packages (with matching
	versions) are available. Exits with `0` status if they are,
	with `1` otherwise.

``--uninstalled``
	Check whether the package list contains at least one uninstalled
	package (having ``-uninstalled`` suffix in the matching filename),
	and exit with `0` status if it does. Exits with `1` status
	otherwise.


.. vim:se ft=rst tw=72 noet spell :

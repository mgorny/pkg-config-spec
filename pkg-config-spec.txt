========================
pkg-config specification
========================
:Author: Michał Górny <mgorny@gentoo.org>
:Copyright: http://creativecommons.org/licenses/by/3.0/


Introduction
============

pkg-config is a helper tool for obtaining correct compiler & linker
flags suitable to satisfying application dependencies. It was designed
to be platform- and language-agnostic, and to support installing
dependencies in any locations without the need for explicitly specifying
those locations every time an application is built.

Sadly, the official pkg-config_ implementation had a few deficiencies.
Most importantly, the upstream decided to use the glib_ and popt_
libraries. The latter being redundant and having portability problems,
the former being quite large and causing circular dependencies (since
glib's build required pkg-config itself), they limited the popularity
and usefulness of pkg-config [1]_.

The fore-mentioned deficiencies of the official implementation has
caused a number of alternative implementations to arose. Amongst them
there were the `OpenBSD implementation`_ in Perl, and pkgconf_
in ANSI C. The work on those implementations and the experience in using
them has shown that pkg-config lacks proper documentation. The only
official documentation on it are the `man page`_ and a short tutorial-
style Guide_.

Thus, I have decided to write a complete and detailed specification of
how pkg-config works based on the experiences with implementing
pkgconf [2]_. The goal is to provide a complete, well-organized guide
which would prove useful both to end-users, and to people trying to
create or improve their own pkg-config implementation.

.. [1] The redundant popt dependency has been finally removed lately,
       and the necessary glib parts started to be bundled along with
       pkg-config in order to simplify bootstrap.
.. [2] Please note that I am *not* the author of pkgconf. William
       Pitcock is.

.. _pkg-config: http://www.freedesktop.org/wiki/Software/pkg-config
.. _glib: http://developer.gnome.org/glib/
.. _popt: http://rpm5.org/files/popt/
.. _`OpenBSD implementation`:
	http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/pkg-config/
.. _pkgconf: https://github.com/pkgconf/pkgconf
.. _`man page`: http://linux.die.net/man/1/pkg-config
.. _Guide: http://people.freedesktop.org/~dbn/pkg-config-guide.html


The package file format
=======================

The packages in pkg-config are specified inside files called `package
files`. These files have an obligatory ``.pc`` suffix, and are line-
oriented text files.


Data encoding
-------------

The consecutive lines are delimited using any of the following
characters::

	line-delim = LF / CR / CR LF / LF CR

Each line has the following form::

	line = line-data *( escaped-delim line-data ) [ "#" comment ]
	escaped-delim = "\" ( line-delim / "#" )

The following should be noted:

1. The ``#`` character indicates start of a comment, except when
   preceded by a backslash (``\``). When preceded by a backslash,
   it is interpreted as a literal ``#``.
2. When not in a comment, the line delimiter can be escaped through
   preceding with a backslash (``\``). In that case, the consecutive
   lines are concatenated.
3. The comments always end at the end-of-a-line.
4. Any other occurrence of a backslash (``\``) is interpreted
   as a literal backslash.

The interpreted line data is created through concatenating
the consecutive line data and escaped delimiters up to the first
non-escaped ``#``, line delimiter or end-of-file. Comments
are discarded.


Data format
-----------

Each interpreted data line follows the following format::

	data-line  = empty-line / keyword / variable

	empty-line = *WSP
	keyword    = *WSP tag *WSP ":" *WSP value *WSP
	variable   = *WSP tag *WSP "=" *WSP value *WSP

	tag        = 1*( ALPHA / DIGIT / "_" / "." )
	value      = *( value-data / esc-var / var-ref )
	esc-var    = "$$"
	var-ref    = "${" tag "}"

The `variable` syntax defines a variable with a name defined by `tag`.
The variable definition becomes effective (i.e. can be referenced)
starting with the following line. If a variable is declared multiple
times, the next declaration replaces the previous value [3]_
and a warning is printed.

The `keyword` syntax defines a keyword with a name defined by `tag`.
The list of allowed names and their meaning is described in Keywords_.
If a keyword uses a name unknown to the particular pkg-config version,
a warning is printed. If a keyword is declared multiple times, the next
declaration replaces the previous value and a warning is printed.

For both variable and keyword definition values, variable substitution
is performed. All occurrences of `var-ref` are substituted with
the current, effective value of a variable named by `tag`. In order to
prevent the variable substitution, the ``$`` character can be escaped by
repeating it twice; all occurrences of ``$$`` (`esc-var`) will be
substituted with a single ``$``.

.. [3] Note that the new value is effective starting with the next line,
       thus the old value will still be used for previous lines
       and the variable declaration itself.


Keywords
--------

The following list describes all the keywords interpreted by pkg-config
as of version 0.27:

``Name``
	Free-form package name. Please note that the name specified here is
	intended for display only; the package is always identified
	in pkg-config by its filename.

``Description``
	Free-form package description.

``Version``
	Package version.

	There are no direct requirements on version string format; however,
	their use in `package lists`_ disallow use of whitespace, ``<``,
	``>``, ``=`` and ``!`` characters. Additionally, it is important
	to consider `version comparison`_ rules.

``URL``
	Package homepage URL.

``Cflags`` or ``CFlags``
	Required compiler flags. These flags are always used.

	The syntax for `Cflags` value is detailed in Cflags_.

``Libs``
	Dependant libraries, and required compiler linking flags. These
	flags are always used when a package is requested directly; they
	are also used when the package is a requisite for another package
	and static linking is used.

	The syntax for `Libs` value is detailed in Libs_.

``Libs.private``
	Private dependant libraries. The flags listed there will be appended
	to the value of `Libs` if static linking is used.

``Requires``
	Public package dependencies. All packages mentioned there will be
	required for the package check to succeed, and the effective
	`Cflags` for each of them will be appended to the effective `Cflags`
	of the current package. Additionally, if static linking is used
	the same applies to `Libs`.

	The syntax for `Requires` value is detailed in `Package lists`_.

``Requires.private``
	Private package dependencies. The packages mentioned there will be
	appended to the effective `Requires` list if static linking is used.

``Conflicts``
	The list of conflicting packages. If any of the packages mentioned
	there is used by the application, the current package can not be
	used.

	The syntax for `Conflicts` value is detailed in `Package lists`_.


Keyword value interpretation
============================

Cflags
------

The `Cflags` keyword contains compiler flags, in a form suitable
for passing to a POSIX shell (excluding the shell expansions). When
parsing the variable, pkg-config uses shell quoting rules to split it
into consecutive command-line arguments.

The flags encountered in `Cflags` are grouped into the two following
groups:

1. the ``-I`` (include path) flags,
2. other flags [4]_.

.. [4] pkg-config additionally concatenates the ``-idirafter``
       option with its argument to ensure that multiple occurences
       of it aren't collapsed.


Libs
----

The `Libs` keyword contains compiler linking flags, in a form suitable
for passing to a POSIX shell (excluding the shell expansions). When
parsing the variable, pkg-config uses shell quoting rules to split it
into consecutive command-line arguments.

The flags encountered in `Libs` are grouped into the three following
groups:

1. the ``-l`` (library name) flags [5]_,
2. the ``-L`` (library path) flags,
3. other flags [6]_.

.. [5] pkg-config additionally ensures not to put C# ``-lib:`` to that
       group.
.. [6] pkg-config additionally concatenates the MacOS X ``-framework``
       option with its argument to ensure that multiple occurences
       of ``-framework`` aren't collapsed.


Package lists
-------------

The `Requires` and `Conflicts` keywords, and also command-line arguments
to pkg-config form package lists. A package list is formed using
the following syntax::

	package-list = *WSP *( package-spec *( package-sep ) )
	package-sep  = WSP | ","

	package-spec = package-name [ ver-op package-version ]
	ver-op       = "<" | "<=" | "=" | "!=" | ">=" | ">"

If `ver-op` and `package-version` are specified, only packages
satisfying the specified version requirement will match. Otherwise,
any package with matching `package-name` will match.

The rules for version matching are detailed in `Version comparison`_.


Version comparison
------------------

pkg-config version comparison rules follow those established
for the RPM_ package manager.

.. XXX

.. _RPM: http://www.rpm.org/


.. vim:se ft=rst tw=72 noet spell :
